<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\controllers\base;

use app\models\Skenario1;
use backend\models\Skenario1Search;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;
use app\models\MasterTahunAjar;
use app\models\MasterMitra;
use app\models\MasterKegiatan;
use app\models\MasterKontrak;
use yii\helpers\Json;

/**
 * Skenario1Controller implements the CRUD actions for Skenario1 model.
 */
class Skenario1Controller extends Controller
{


    /**
     * @var boolean whether to enable CSRF validation for the actions in this controller.
     * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
     */
    public $enableCsrfValidation = false;


    /**
     * Lists all Skenario1 models.
     * @return mixed
     */
    public function actionIndex($id_tahun_ajar = null)
    {
        if (\Yii::$app->user->identity->role == 6) {
            $id_mitra = \Yii::$app->user->identity->masterMitra->id;
            $tahun = MasterTahunAjar::find()
                ->select([
                    'master_tahun_ajar.*',
                    'SUM(IFNULL(master_kegiatan.nominal, 0)) as nominal',
                    'SUM(IFNULL(master_kegiatan.nominal, 0)) / IFNULL(total_dana.total_dana, 0) * master_tahun_ajar.total_kuota as kuota',
                    'skenario1.diambil',
                    'skenario1.request',
                    'skenario1.kuota_fix',
                    'skenario1.id as id_skenario',
                ])
                ->leftJoin('master_kegiatan', 'master_tahun_ajar.id = master_kegiatan.id_tahun_ajar AND master_kegiatan.id_mitra='.$id_mitra.' AND (master_kegiatan.status=1) AND (master_kegiatan.flag=1)')
                ->leftJoin('skenario1', 'master_tahun_ajar.id = skenario1.id_tahun_ajar AND (skenario1.id_mitra='.$id_mitra.')')
                ->leftJoin('(SELECT sum(nominal) as total_dana, id_tahun_ajar FROM master_kegiatan WHERE status=1 AND flag=1 GROUP BY id_tahun_ajar) as total_dana', 'master_tahun_ajar.id = total_dana.id_tahun_ajar')
                ->groupBy('master_tahun_ajar.id')
                ->orderBy('master_tahun_ajar.awal');

            $dataProvider = new ActiveDataProvider([
                'query' => $tahun
            ]);

            return $this->render('index', [
                'dataProvider' => $dataProvider,
            ]);
        } else if (\Yii::$app->user->identity->role == 2) {
            $searchModel = new Skenario1Search;
            $dataProvider = $searchModel->search($_GET);
            $tahun_ajar = isset($id_tahun_ajar) ? MasterTahunAjar::find()->where(['id' => $id_tahun_ajar])->one() : null;

            Tabs::clearLocalStorage();

            Url::remember();
            \Yii::$app->session['__crudReturnUrl'] = null;

            return $this->render('index', [
                'dataProvider' => $dataProvider,
                'searchModel' => $searchModel,
                'tahunAjar' => $tahun_ajar,
            ]);
        }
    }

    public function actionAlokasiBeasiswa($id = null) {
        // validate if there is a editable input saved via AJAX
        if (\Yii::$app->request->post('hasEditable')) {
            // instantiate your book model for saving
            if ($id == '') {
                $model = new Skenario1();
            } else {
                $model = Skenario1::findOne($id);
            }

            // store a default json response as desired by editable
            $out = Json::encode(['output' => '', 'message' => '']);

            // fetch the first entry in posted data (there should only be one entry
            // anyway in this array for an editable submission)
            // - $posted is the posted data for Book without any indexes
            // - $post is the converted array for single model validation
            if (\Yii::$app->user->identity->role == 6) {
                $posted = current($_POST['MasterTahunAjar']);
            } else {
                $posted = current($_POST['MasterMitra']);
            }
            $post = ['Skenario1' => $posted];

            // load model like any single model validation
            if ($model->load($post)) {


                // custom output to return to be displayed as the editable grid cell
                // data. Normally this is empty - whereby whatever value is edited by
                // in the input by user is updated automatically.

                $message = '';
                $output = '';
                // specific use case where you need to validate a specific
                // editable column posted when you have more than one
                // EditableColumn in the grid view. We evaluate here a
                // check to see if buy_amount was posted for the Book model
                if (isset($posted['diambil'])) {
                    $model->diambil = $posted['diambil'];
                    $model->kuota = $_POST['kuota'];
                    // can save model or do something before saving model
                    if ($model->diambil <= $_POST['kuota']) {
                        if ($model->isNewRecord) {
                            $model->id_mitra = \Yii::$app->user->identity->masterMitra->id;
                            $model->id_tahun_ajar = $_POST['editableKey'];
                        }
                        if (!$model->save()) {
                            $message = print_r($model);
                        }
                        $output = $posted['diambil'];
                    } else {
                        $message = 'Tidak boleh melebihi kuota.';
                    }
                }
                if (isset($posted['request'])) {
                    $model->request = $posted['request'];
                    // can save model or do something before saving model
                    if ($model->diambil == $_POST['kuota']) {
                        $model->save();
                        $output = $posted['request'];
                    } else {
                        $message = 'Penuhi kolom ambil terlebih dahulu.';
                    }
                }

                // similarly you can check if the name attribute was posted as well
                // if (isset($posted['name'])) {
                // $output = ''; // process as you need
                // }
                $out = Json::encode(['output' => $output, 'message' => $message]);
            }
            // return ajax json encoded response and exit
            echo $out;
            return;
        }
    }

    public function actionRenderSkenario($id) {
        $tahun = MasterTahunAjar::find()
            ->where(['id' => $id])
            ->one();

        $mitra = MasterMitra::find()
            ->select([
                'master_mitra.id',
                'master_mitra.nama',
                'SUM(IFNULL(master_kegiatan.nominal, 0)) as nominal',
                'SUM(IFNULL(master_kegiatan.nominal, 0)) / total_dana.total_dana * total_kuota.total_kuota as kuota',
                'skenario1.diambil',
                'skenario1.request',
                'skenario1.kuota_fix',
                'skenario1.id as id_skenario',
            ])
            ->leftJoin('master_kegiatan', 'master_mitra.id = master_kegiatan.id_mitra AND (master_kegiatan.id_tahun_ajar='.$id.') AND (master_kegiatan.status=1) AND (master_kegiatan.flag=1)')
            ->leftJoin('skenario1', 'master_mitra.id = skenario1.id_mitra AND (skenario1.id_tahun_ajar='.$id.')')
            ->innerJoin('(SELECT SUM(nominal) as total_dana FROM master_kegiatan WHERE status=1 AND flag=1 AND id_tahun_ajar='.$id.') AS total_dana', 'true')
            ->innerJoin('(SELECT total_kuota FROM master_tahun_ajar WHERE id='.$id.') AS total_kuota', 'true')
            ->groupBy('master_mitra.id');

        $dataProvider = new ActiveDataProvider([
            'query' => $mitra
        ]);

        $now = date('Y-m-d');
        if ($now >= date('Y-m-d', strtotime('-'.($tahun->jeda_akhir - 1).'days', strtotime($tahun->akhir)))) {
            $status['status'] = true;
            $status['message'] = 'Nilai kuota beasiswa bernilai tetap.';
        } else {
            $status['status'] = false;
            $status['message'] = 'Nilai kuota beasiswa dapat berubah.';
        }

        return $this->renderAjax('_dataSkenario1', [
            'dataProvider' => $dataProvider,
            'tahun_ajar' => $tahun,
            'isEditable' => $status
        ]);
    }

    public function actionRenderSummary($id) {
        $tahun = MasterTahunAjar::find()
            ->where(['id' => $id])
            ->one();

        $skenario = Skenario1::find()
            ->select([
                'COUNT(skenario1.id_mitra) as mitra_aktif',
                'total_dana.total_dana',
                'master_tahun_ajar.total_kuota as total_kuota',
                'total_perhitungan.total_perhitungan',
                'SUM(skenario1.diambil) as total_diambil',
                'SUM(skenario1.request) as total_request',
            ])
            ->innerJoin('(SELECT SUM(nominal) as total_dana FROM master_kegiatan WHERE status=1 AND flag=1 AND id_tahun_ajar='.$id.') AS total_dana', 'true')
            ->innerJoin('(select sum(kuota.kuota) as total_perhitungan
                                from master_mitra
                                inner join (
                                    SELECT CEIL(SUM(master_kegiatan.nominal) / total_dana.total_dana * master_tahun_ajar.total_kuota) as kuota, master_kegiatan.id_mitra
                                    FROM master_kegiatan
                                    INNER JOIN (SELECT SUM(nominal) as total_dana FROM master_kegiatan WHERE status=1 AND flag=1 AND id_tahun_ajar='.$id.') AS total_dana ON TRUE
                                    INNER JOIN master_tahun_ajar ON master_tahun_ajar.id = master_kegiatan.id_tahun_ajar
                                    WHERE master_kegiatan.status = 1 AND master_kegiatan.flag = 1 AND master_kegiatan.id_tahun_ajar = '.$id.'
                                    GROUP BY master_kegiatan.id_mitra
                                ) as kuota on kuota.id_mitra = master_mitra.id) AS total_perhitungan', 'true')
            ->innerJoinWith('idTahunAjar')
            ->where(['skenario1.id_tahun_ajar' => $id]);

        $dataProvider = new ActiveDataProvider([
            'query' => $skenario
        ]);

        return $this->renderAjax('_summarySkenario1', [
            'dataProvider' => $dataProvider,
            'tahun_ajar' => $tahun,
        ]);
    }

    public function actionCoba($idnya)
    {
        $model = $this->findModel($idcoba);
        $model->dimbil = 10;
        $model->save();
        return $this->redirect(Url::previous());

    }

    public function actionCalculate($id) {
        $skenario = Skenario1::find()->where(['id_tahun_ajar' => $id])->orderBy('kuota DESC')->all();
        $total_terhitung = MasterMitra::find()
            ->select(['sum(kuota.kuota) as kuota'])
            ->innerJoin('
                (SELECT CEIL(SUM(master_kegiatan.nominal) / total_dana.total_dana * master_tahun_ajar.total_kuota) as kuota, master_kegiatan.id_mitra
                FROM master_kegiatan
                INNER JOIN (SELECT SUM(nominal) as total_dana FROM master_kegiatan WHERE status=1 AND flag=1 AND id_tahun_ajar='.$id.') AS total_dana ON TRUE
                INNER JOIN master_tahun_ajar ON master_tahun_ajar.id = master_kegiatan.id_tahun_ajar
                WHERE master_kegiatan.status = 1 AND master_kegiatan.flag = 1 AND master_kegiatan.id_tahun_ajar = '.$id.'
                GROUP BY master_kegiatan.id_mitra) as kuota
            ', 'kuota.id_mitra = master_mitra.id')
            ->one();
        $total_diambil = Skenario1::find()->select(['sum(diambil) as total_diambil'])->where(['id_tahun_ajar' => $id])->one();

//        print_r([
//            'skenario' => $skenario,
//            'total_terhitung' => $total_terhitung->kuota,
//            'total_diambil' => $total_diambil->total_diambil,
//        ]);

        $sisa = $total_terhitung->kuota - $total_diambil->total_diambil;
        foreach ($skenario as $skenario_item) {
            if ($skenario_item->request == null) {
                $skenario_item->kuota_fix = $skenario_item->diambil;
            } else {
                if ($skenario_item->request <= $sisa) {
                    $skenario_item->kuota_fix = $skenario_item->diambil + $skenario_item->request;
                    $sisa -= $skenario_item->request;
                } else {
                    $skenario_item->kuota_fix = $skenario_item->diambil + $sisa;
                    $sisa -= $sisa;
                }
            }
            $skenario_item->save();
        }

        $tahun_ajar = MasterTahunAjar::find()->where(['id' => $id])->one();
        $tahun_ajar->is_calculated = 1;
        $tahun_ajar->save();

        $this->redirect(Url::to(['skenario1/index?id_tahun_ajar='.$id]));
    }

    /**
     * Displays a single Skenario1 model.
     * @param integer $id
     *
     * @return mixed
     */
    public function actionView($id)
    {
        \Yii::$app->session['__crudReturnUrl'] = Url::previous();
        Url::remember();
        Tabs::rememberActiveState();

        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    public function actionRupiah($nilai)
    {
        $jadi = "Rp " . number_format($nilai, 2, ',', '.');
        return $jadi;
    }

    /**
     * Creates a new Skenario1 model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Skenario1;

        try {
            if ($model->load($_POST) && $model->save()) {
                return $this->redirect(['view', 'id' => $model->id]);
            } elseif (!\Yii::$app->request->isPost) {
                $model->load($_GET);
            }
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            $model->addError('_exception', $msg);
        }
        return $this->render('create', ['model' => $model]);
    }

    /**
     * Updates an existing Skenario1 model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load($_POST) && $model->save()) {
            return $this->redirect(Url::previous());
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing Skenario1 model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        try {
            $this->findModel($id)->delete();
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            \Yii::$app->getSession()->addFlash('error', $msg);
            return $this->redirect(Url::previous());
        }

// TODO: improve detection
        $isPivot = strstr('$id', ',');
        if ($isPivot == true) {
            return $this->redirect(Url::previous());
        } elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
            Url::remember(null);
            $url = \Yii::$app->session['__crudReturnUrl'];
            \Yii::$app->session['__crudReturnUrl'] = null;

            return $this->redirect($url);
        } else {
            return $this->redirect(['index']);
        }
    }

    /**
     * Finds the Skenario1 model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Skenario1 the loaded model
     * @throws HttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Skenario1::findOne($id)) !== null) {
            return $model;
        } else {
            throw new HttpException(404, 'The requested page does not exist.');
        }
    }
}
