<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\controllers\base;

use app\models\MasterKontrak;
use app\models\MasterKegiatan;
use backend\models\MasterKontrakSearch;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;

/**
 * KontrakController implements the CRUD actions for MasterKontrak model.
 */
class KontrakController extends Controller
{


    /**
     * @var boolean whether to enable CSRF validation for the actions in this controller.
     * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
     */
    public $enableCsrfValidation = false;


    /**
     * Lists all MasterKontrak models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new MasterKontrakSearch;
        $dataProvider = $searchModel->search($_GET);

        Tabs::clearLocalStorage();

        Url::remember();
        \Yii::$app->session['__crudReturnUrl'] = null;

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'searchModel' => $searchModel,
        ]);
    }

    public function actionRupiah($nilai)
    {
        $jadi = "Rp " . number_format($nilai, 2, ',', '.');
        return $jadi;
    }

    public function actionPersent($idKontrak)
    {
        // $model = new MasterKegiatan;
        // $hasil = $model->getPercent($idKontrak);
        $jumlahKegiatan = 0;
        $jumlahNominal = 0;
        $queryKontrak = $this->findModel($idKontrak);

        $nilaiKontrak = $queryKontrak->nilai_kontrak;

        $kegiatan = MasterKegiatan::find()
            ->where([
                'id_kontrak' => $idKontrak,
                'status' => 1,
                'flag' => 1
            ])
            ->all();

        foreach ($kegiatan as $key => $dataKegiatan) {
            $jumlahKegiatan++;
            $jumlahNominal += $dataKegiatan['nominal'];
        }
        $persent = ($jumlahNominal / $nilaiKontrak) * 100;
        return round($persent);

    }


    public function actionDetail($id)
    {
        // $mitra = MasterMitra::findOne($dataMitra['id']);


        //            $kontrak = $mitra-> getMasterKontraks()->andWhere('status=1')->andWhere('flag=1')->all();
        $searchModel = new MasterKontrakSearch;
        $dataProvider = $searchModel->searchDetail($_GET, $id);

        Tabs::clearLocalStorage();

        Url::remember();
        \Yii::$app->session['__crudReturnUrl'] = null;

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'searchModel' => $searchModel,
        ]);
    }


    /**
     * Displays a single MasterKontrak model.
     * @param integer $id
     *
     * @return mixed
     */
    public function actionView($id)
    {
        \Yii::$app->session['__crudReturnUrl'] = Url::previous();
        Url::remember();
        Tabs::rememberActiveState();

        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new MasterKontrak model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new MasterKontrak;

        try {
            if ($model->load($_POST) && $model->save()) {
                return $this->redirect(['view', 'id' => $model->id]);
            } elseif (!\Yii::$app->request->isPost) {
                $model->load($_GET);
            }
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            $model->addError('_exception', $msg);
        }

        if (\Yii::$app->user->identity->role == 6) {
            $model->id_mitra = \Yii::$app->user->identity->masterMitra->id;
        }

        return $this->render('create', ['model' => $model]);
    }

    /**
     * Updates an existing MasterKontrak model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load($_POST) && $model->save()) {
            return $this->redirect(Url::previous());
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing MasterKontrak model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        try {
            $model = MasterKontrak::findOne($id);
            $model->flag = 0;
            $model->save();
//$this->findModel($id)->delete();
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2])) ? $e->errorInfo[2] : $e->getMessage();
            \Yii::$app->getSession()->addFlash('error', $msg);
            return $this->redirect(Url::previous());
        }

// TODO: improve detection
        $isPivot = strstr('$id', ',');
        if ($isPivot == true) {
            return $this->redirect(Url::previous());
        } elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
            Url::remember(null);
            $url = \Yii::$app->session['__crudReturnUrl'];
            \Yii::$app->session['__crudReturnUrl'] = null;

            return $this->redirect($url);
        } else {
            return $this->redirect(['index']);
        }
    }


    public function actionLists($id)
    {
        $countPosts = MasterKontrak::find()
            ->where(['id_mitra' => $id])->andWhere('status=1')->andWhere('flag=1')->count();

        $posts = MasterKontrak::find()
            ->where(['id_mitra' => $id])->andWhere('status=1')->andWhere('flag=1')->all();

        if ($countPosts > 0) {
            foreach ($posts as $post) {
                echo "<option value='" . $post->id . "'>" . $post->nama . "</option>";
            }
        } else {
            echo "<option>-</option>";
        }

    }

    public function actionApprove($id)
    {
        $model = MasterKontrak::findOne($id);
        $model->status = 1;
        $model->save();
        return $this->redirect(Url::previous());
    }

    /**
     * Finds the MasterKontrak model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return MasterKontrak the loaded model
     * @throws HttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = MasterKontrak::findOne($id)) !== null) {
            return $model;
        } else {
            throw new HttpException(404, 'The requested page does not exist.');
        }
    }
}
